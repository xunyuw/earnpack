{
  "_args": [
    [
      "lineparser",
      "/Users/xouyang/workspace/orjan/project/thingWise/test/tcpclient"
    ]
  ],
  "_from": "lineparser@*",
  "_id": "lineparser@0.9.8",
  "_inCache": true,
  "_installable": true,
  "_location": "/lineparser",
  "_npmUser": {
    "email": "weidagang@gmail.com",
    "name": "weidagang"
  },
  "_npmVersion": "1.3.4",
  "_phantomChildren": {},
  "_requested": {
    "name": "lineparser",
    "raw": "lineparser",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/lineparser/-/lineparser-0.9.8.tgz",
  "_shasum": "4c6c04e0a094ea8605c6d318e051fd947fd5da96",
  "_shrinkwrap": null,
  "_spec": "lineparser",
  "_where": "/Users/xouyang/workspace/orjan/project/thingWise/test/tcpclient",
  "author": {
    "name": "dagang.wei"
  },
  "bugs": {
    "url": "https://github.com/weidagang/line-parser-js/issues"
  },
  "dependencies": {},
  "description": "A meta-data driven command line parser for Node.js",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "4c6c04e0a094ea8605c6d318e051fd947fd5da96",
    "tarball": "https://registry.npmjs.org/lineparser/-/lineparser-0.9.8.tgz"
  },
  "homepage": "https://github.com/weidagang/line-parser-js#readme",
  "keywords": [
    "argparser",
    "argsparser",
    "arguments",
    "cmdparser",
    "comfort",
    "command line",
    "commander",
    "getopt",
    "optimist",
    "options",
    "optparser",
    "parser",
    "subcommand"
  ],
  "license": "MIT",
  "main": "lineparser.js",
  "maintainers": [
    {
      "name": "weidagang",
      "email": "weidagang@gmail.com"
    }
  ],
  "name": "lineparser",
  "optionalDependencies": {},
  "readme": "LineParser.js\n=================================\n\nLineParser is a meta-data driven command line parser. \n\n### Features\n* Command line specification with meta-data in JSON\n* Usage pattern matching\n* Subcommand\n* Multiple occurrences of an option, e.g. grep -e foo -e bar \n* Help info\n\n### Sample\n\n```javascript\n#!/usr/bin/env node\n\n// use meta-data in JSON to define the command line specification\nvar meta = {\n    program : 'adb',\n    name : 'Android Debug Bridge',\n    version : '1.0.3',\n    subcommands : [ 'connect', 'disconnect', 'shell', 'push', 'install' ], \n    options : {\n        flags : [\n            /* short_name, name, description */\n            [ 'h', 'help', 'print program usage' ],\n            [ 'r', 'reinstall', 'reinstall package' ],\n            [ 'l', 'localhost', 'localhost' ]\n        ],\n        parameters : [\n            /* short_name, name, description, default_value */\n            [ null, 'host', 'adb server hostname or IP address', null ],\n            [ 'p', 'port', 'adb server port', 5037 ]\n        ]\n    },\n    usages : [\n        /* subcommand, options, positional-arguments, description, handler */\n        [ 'connect', ['host', '[port]'], null, 'connect to adb server', adb_connect ],\n        [ 'connect', [ 'l' ], null, 'connect to the local adb server', adb_connect ],\n        [ 'disconnect', null, null, 'disconnect from adb server', adb_disconnect ],\n        [ 'shell', null, ['[cmd]'], 'run shell commands', adb_shell ],\n        [ 'push', null, ['src', 'dest'], 'push file to adb server', adb_push ],\n        [ 'install', ['r'], ['package'], 'install package', adb_install ],\n        [ null, ['h'], null, 'help', adb_help ],\n        [ null, null, null, 'help', adb_help ]\n    ]\n};\n\n// parse command line args based on the meta data \ntry {\n    var lineparser = require('lineparser');\n    var parser = lineparser.init(meta);\n\n    // print help\n    var help = parser.help();\n    console.log(help);\n\n    // the handler adb_connect will be invoked\n    parser.parse(['connect', '--host', '10.69.2.186', '--port', '5036'], \"I'm token\");\n    \n    // the handler adb_install will be invoked\n    parser.parse(['install', '-r', '/pkgs/bird.apk']);\n\n    // the handler adb_push will be invoked\n    parser.parse(['push', '/pkgs/bird.apk', '/data/tmp']);\n\n    // the handler adb_shell will be invoked\n    parser.parse(['shell', 'ls', '-l', '/data/data/']);\n}\ncatch (e) {\n    // exception will be thrown if there's an error with the meta data\n    console.error(e);\n}\n\n// callbacks for various usages\nfunction adb_help(r, token) {\n    console.log(r.help());\n}\n\nfunction adb_connect(r, token) {\n    if (r.flags.l) {\n        console.log('Connect to localhost:5037'); \n    }\n    else {\n        console.log('Connect to ' + r.parameters.host + ':' + r.parameters.p); \n    }\n\n    console.log('Token: ' + token);\n}\n\nfunction adb_disconnect(r, token) {\n    console.log('Disconnect'); \n}\n\nfunction adb_shell(r, token) {\n    if (0 == r.args) {\n        console.log('Enter adb shell');\n    }\n    else {\n        var cmd = 'Run command: '\n        for (var i = 0; i < r.args.length; ++i) {\n            cmd += ' ' + r.args[i]; \n        }\n        console.log(cmd);\n    }\n}\n\nfunction adb_push(r, token) {\n    console.log('Push file ' + r.args[0] + ' to ' + r.args[1]); \n}\n\nfunction adb_install(r, token) {\n    console.log('Install package ' + r.args[0] + ', reinstall: ' + r.flags.r); \n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/weidagang/line-parser-js.git"
  },
  "scripts": {
    "test": "test_lineparser.js"
  },
  "version": "0.9.8"
}
